//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxdashboard = Microsoft.Robotics.Services.Dashboard.Proxy;
using reflection = System.Reflection;


namespace Microsoft.Robotics.Services.Dashboard.Proxy
{
    
    
    /// <summary>
    /// Dashboard Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the Dashboard service
        public const String Identifier = "http://schemas.microsoft.com/robotics/2006/10/dashboard.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// State Type
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("StateType", Namespace="http://schemas.microsoft.com/robotics/2006/10/dashboard.html")]
    public class StateType : ICloneable, IDssSerializable
    {
        
        private Boolean _log;
        
        private String _logFile;
        
        private String _machine;
        
        private UInt16 _port;
        
        private GUIOptions _options;
        
        /// <summary>
        /// Log
        /// </summary>
        [DataMember()]
        public Boolean Log
        {
            get
            {
                return this._log;
            }
            set
            {
                this._log = value;
            }
        }
        
        /// <summary>
        /// Log File
        /// </summary>
        [DataMember()]
        public String LogFile
        {
            get
            {
                return this._logFile;
            }
            set
            {
                this._logFile = value;
            }
        }
        
        /// <summary>
        /// Machine
        /// </summary>
        [DataMember()]
        public String Machine
        {
            get
            {
                return this._machine;
            }
            set
            {
                this._machine = value;
            }
        }
        
        /// <summary>
        /// Port
        /// </summary>
        [DataMember()]
        public UInt16 Port
        {
            get
            {
                return this._port;
            }
            set
            {
                this._port = value;
            }
        }
        
        /// <summary>
        /// Options
        /// </summary>
        [DataMember()]
        public GUIOptions Options
        {
            get
            {
                return this._options;
            }
            set
            {
                this._options = value;
            }
        }
        
        /// <summary>
        /// Copy To State Type
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            StateType typedTarget = target as StateType;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Log = this.Log;
            typedTarget.LogFile = this.LogFile;
            typedTarget.Machine = this.Machine;
            typedTarget.Port = this.Port;
            typedTarget.Options = (this.Options == null) ? null : (GUIOptions)((Microsoft.Dss.Core.IDssSerializable)this.Options).Clone();
        }
        
        /// <summary>
        /// Clone State Type
        /// </summary>
        public virtual object Clone()
        {
            StateType target = new StateType();

            target.Log = this.Log;
            target.LogFile = this.LogFile;
            target.Machine = this.Machine;
            target.Port = this.Port;
            target.Options = (this.Options == null) ? null : (GUIOptions)((Microsoft.Dss.Core.IDssSerializable)this.Options).Clone();
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Log);

            if (LogFile == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(LogFile);
            }

            if (Machine == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(Machine);
            }

            writer.Write(Port);

            if (Options == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                ((Microsoft.Dss.Core.IDssSerializable)Options).Serialize(writer);
            }

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Log = reader.ReadBoolean();

            if (reader.ReadByte() == 0) {}
            else
            {
                LogFile = reader.ReadString();
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                Machine = reader.ReadString();
            } //nullable

            Port = reader.ReadUInt16();

            if (reader.ReadByte() == 0) {}
            else
            {
                Options = (GUIOptions)((Microsoft.Dss.Core.IDssSerializable)new GUIOptions()).Deserialize(reader);
            } //nullable

            return this;

        }
    }
    
    /// <summary>
    /// GUI Options
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GUIOptions", Namespace="http://schemas.microsoft.com/robotics/2006/10/dashboard.html")]
    public class GUIOptions : ICloneable, IDssSerializable
    {
        
        private Int32 _windowStartX;
        
        private Int32 _windowStartY;
        
        private Double _deadZoneX;
        
        private Double _deadZoneY;
        
        private Double _translateScaleFactor;
        
        private Double _rotateScaleFactor;
        
        private Boolean _showLRF;
        
        private Boolean _showArm;
        
        private Double _robotWidth;
        
        private Boolean _displayMap;
        
        private Double _maxLRFRange;
        
        private Double _motionSpeed;
        
        private Double _driveDistance;
        
        private Double _rotateAngle;
        
        private Int32 _cameraInterval;
        
        /// <summary>
        /// Window StartX
        /// </summary>
        [DataMember()]
        public Int32 WindowStartX
        {
            get
            {
                return this._windowStartX;
            }
            set
            {
                this._windowStartX = value;
            }
        }
        
        /// <summary>
        /// Window StartY
        /// </summary>
        [DataMember()]
        public Int32 WindowStartY
        {
            get
            {
                return this._windowStartY;
            }
            set
            {
                this._windowStartY = value;
            }
        }
        
        /// <summary>
        /// Dead ZoneX
        /// </summary>
        [DataMember()]
        public Double DeadZoneX
        {
            get
            {
                return this._deadZoneX;
            }
            set
            {
                this._deadZoneX = value;
            }
        }
        
        /// <summary>
        /// Dead ZoneY
        /// </summary>
        [DataMember()]
        public Double DeadZoneY
        {
            get
            {
                return this._deadZoneY;
            }
            set
            {
                this._deadZoneY = value;
            }
        }
        
        /// <summary>
        /// Translate Scale Factor
        /// </summary>
        [DataMember()]
        public Double TranslateScaleFactor
        {
            get
            {
                return this._translateScaleFactor;
            }
            set
            {
                this._translateScaleFactor = value;
            }
        }
        
        /// <summary>
        /// Rotate Scale Factor
        /// </summary>
        [DataMember()]
        public Double RotateScaleFactor
        {
            get
            {
                return this._rotateScaleFactor;
            }
            set
            {
                this._rotateScaleFactor = value;
            }
        }
        
        /// <summary>
        /// ShowLRF
        /// </summary>
        [DataMember()]
        public Boolean ShowLRF
        {
            get
            {
                return this._showLRF;
            }
            set
            {
                this._showLRF = value;
            }
        }
        
        /// <summary>
        /// Show Arm
        /// </summary>
        [DataMember()]
        public Boolean ShowArm
        {
            get
            {
                return this._showArm;
            }
            set
            {
                this._showArm = value;
            }
        }
        
        /// <summary>
        /// Robot Width
        /// </summary>
        [DataMember()]
        public Double RobotWidth
        {
            get
            {
                return this._robotWidth;
            }
            set
            {
                this._robotWidth = value;
            }
        }
        
        /// <summary>
        /// Display Map
        /// </summary>
        [DataMember()]
        public Boolean DisplayMap
        {
            get
            {
                return this._displayMap;
            }
            set
            {
                this._displayMap = value;
            }
        }
        
        /// <summary>
        /// MaxLRF Range
        /// </summary>
        [DataMember()]
        public Double MaxLRFRange
        {
            get
            {
                return this._maxLRFRange;
            }
            set
            {
                this._maxLRFRange = value;
            }
        }
        
        /// <summary>
        /// Motion Speed
        /// </summary>
        [DataMember()]
        public Double MotionSpeed
        {
            get
            {
                return this._motionSpeed;
            }
            set
            {
                this._motionSpeed = value;
            }
        }
        
        /// <summary>
        /// Drive Distance
        /// </summary>
        [DataMember()]
        public Double DriveDistance
        {
            get
            {
                return this._driveDistance;
            }
            set
            {
                this._driveDistance = value;
            }
        }
        
        /// <summary>
        /// Rotate Angle
        /// </summary>
        [DataMember()]
        public Double RotateAngle
        {
            get
            {
                return this._rotateAngle;
            }
            set
            {
                this._rotateAngle = value;
            }
        }
        
        /// <summary>
        /// Camera Interval
        /// </summary>
        [DataMember()]
        public Int32 CameraInterval
        {
            get
            {
                return this._cameraInterval;
            }
            set
            {
                this._cameraInterval = value;
            }
        }
        
        /// <summary>
        /// Copy To GUI Options
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            GUIOptions typedTarget = target as GUIOptions;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.WindowStartX = this.WindowStartX;
            typedTarget.WindowStartY = this.WindowStartY;
            typedTarget.DeadZoneX = this.DeadZoneX;
            typedTarget.DeadZoneY = this.DeadZoneY;
            typedTarget.TranslateScaleFactor = this.TranslateScaleFactor;
            typedTarget.RotateScaleFactor = this.RotateScaleFactor;
            typedTarget.ShowLRF = this.ShowLRF;
            typedTarget.ShowArm = this.ShowArm;
            typedTarget.RobotWidth = this.RobotWidth;
            typedTarget.DisplayMap = this.DisplayMap;
            typedTarget.MaxLRFRange = this.MaxLRFRange;
            typedTarget.MotionSpeed = this.MotionSpeed;
            typedTarget.DriveDistance = this.DriveDistance;
            typedTarget.RotateAngle = this.RotateAngle;
            typedTarget.CameraInterval = this.CameraInterval;
        }
        
        /// <summary>
        /// Clone GUI Options
        /// </summary>
        public virtual object Clone()
        {
            GUIOptions target = new GUIOptions();

            target.WindowStartX = this.WindowStartX;
            target.WindowStartY = this.WindowStartY;
            target.DeadZoneX = this.DeadZoneX;
            target.DeadZoneY = this.DeadZoneY;
            target.TranslateScaleFactor = this.TranslateScaleFactor;
            target.RotateScaleFactor = this.RotateScaleFactor;
            target.ShowLRF = this.ShowLRF;
            target.ShowArm = this.ShowArm;
            target.RobotWidth = this.RobotWidth;
            target.DisplayMap = this.DisplayMap;
            target.MaxLRFRange = this.MaxLRFRange;
            target.MotionSpeed = this.MotionSpeed;
            target.DriveDistance = this.DriveDistance;
            target.RotateAngle = this.RotateAngle;
            target.CameraInterval = this.CameraInterval;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(WindowStartX);

            writer.Write(WindowStartY);

            writer.Write(DeadZoneX);

            writer.Write(DeadZoneY);

            writer.Write(TranslateScaleFactor);

            writer.Write(RotateScaleFactor);

            writer.Write(ShowLRF);

            writer.Write(ShowArm);

            writer.Write(RobotWidth);

            writer.Write(DisplayMap);

            writer.Write(MaxLRFRange);

            writer.Write(MotionSpeed);

            writer.Write(DriveDistance);

            writer.Write(RotateAngle);

            writer.Write(CameraInterval);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            WindowStartX = reader.ReadInt32();

            WindowStartY = reader.ReadInt32();

            DeadZoneX = reader.ReadDouble();

            DeadZoneY = reader.ReadDouble();

            TranslateScaleFactor = reader.ReadDouble();

            RotateScaleFactor = reader.ReadDouble();

            ShowLRF = reader.ReadBoolean();

            ShowArm = reader.ReadBoolean();

            RobotWidth = reader.ReadDouble();

            DisplayMap = reader.ReadBoolean();

            MaxLRFRange = reader.ReadDouble();

            MotionSpeed = reader.ReadDouble();

            DriveDistance = reader.ReadDouble();

            RotateAngle = reader.ReadDouble();

            CameraInterval = reader.ReadInt32();

            return this;

        }
    }
    
    /// <summary>
    /// Dashboard Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class DashboardOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Replace>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<StateType,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<StateType,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// State Type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace()
        {
            StateType body = new StateType();
            Replace op = new Replace(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Replace and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace(StateType body)
        {
            Replace op = new Replace();
            op.Body = body ?? new StateType();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<StateType, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<StateType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Replace
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<StateType, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace()
        {
        }
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace(StateType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace(StateType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
