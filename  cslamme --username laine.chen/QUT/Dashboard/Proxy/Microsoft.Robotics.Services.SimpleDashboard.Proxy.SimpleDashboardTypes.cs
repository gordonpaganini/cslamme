//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using Microsoft.Dss.Core.Attributes;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxsimpledashboard = Microsoft.Robotics.Services.SimpleDashboard.Proxy;
using reflection = System.Reflection;

[assembly: ContractNamespace(pxsimpledashboard.Contract.Identifier, ClrNamespace="Microsoft.Robotics.Services.SimpleDashboard.Proxy")]


namespace Microsoft.Robotics.Services.SimpleDashboard.Proxy
{
    
    /// <summary>
    /// SimpleDashboard Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        /// The Unique Contract Identifier for the SimpleDashboard service
        public const String Identifier = "http://schemas.microsoft.com/robotics/2006/01/simpledashboard.html";
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            List<contractmodel.ServiceSummary> services = null;
            io.Stream stream = null;
            try
            {
                string Resource = @"Microsoft.Robotics.Services.SimpleDashboard.Resources.DssModel.dss";
                stream = reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(Resource);
                compression.GZipStream compressionStream = new compression.GZipStream(stream, compression.CompressionMode.Decompress, true);
                XmlSerializer serializer = new XmlSerializer(typeof(List<contractmodel.ServiceSummary>));
                services = (List<contractmodel.ServiceSummary>)serializer.Deserialize(compressionStream);
                compressionStream.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error retrieving Dss Service Model: ", ex.Message);
            }
            finally
            {
                if (stream != null)
                {
                    stream.Close();
                    stream = null;
                }
            }
            return services;

        }
    }
    /// <summary>
    /// State Type
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("StateType", Namespace="http://schemas.microsoft.com/robotics/2006/01/simpledashboard.html")]
    public class StateType : System.ICloneable
    {
        private Boolean _log;
        private String _logFile;
        private String _machine;
        private UInt16 _port;
        private GUIOptions _options;
        /// <summary>
        /// Log
        /// </summary>
        [DataMember()]
        public Boolean Log
        {
            get
            {
                return this._log;
            }
            set
            {
                this._log = value;
            }
        }
        /// <summary>
        /// Log File
        /// </summary>
        [DataMember()]
        public String LogFile
        {
            get
            {
                return this._logFile;
            }
            set
            {
                this._logFile = value;
            }
        }
        /// <summary>
        /// Machine
        /// </summary>
        [DataMember()]
        public String Machine
        {
            get
            {
                return this._machine;
            }
            set
            {
                this._machine = value;
            }
        }
        /// <summary>
        /// Port
        /// </summary>
        [DataMember()]
        public UInt16 Port
        {
            get
            {
                return this._port;
            }
            set
            {
                this._port = value;
            }
        }
        /// <summary>
        /// Options
        /// </summary>
        [DataMember()]
        public GUIOptions Options
        {
            get
            {
                return this._options;
            }
            set
            {
                this._options = value;
            }
        }
        public void CopyTo(StateType target)
        {
            target.Log = this.Log;
            target.LogFile = this.LogFile;
            target.Machine = this.Machine;
            target.Port = this.Port;
            target.Options = (this.Options == null) ? null : (GUIOptions)((System.ICloneable)this.Options).Clone();
        }
        public virtual object Clone()
        {
            StateType newobj = new StateType();
            CopyTo(newobj);
            return newobj;

        }
    }
    /// <summary>
    /// GUI Options
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GUIOptions", Namespace="http://schemas.microsoft.com/robotics/2006/01/simpledashboard.html")]
    public class GUIOptions : System.ICloneable
    {
        private Double _deadZoneX;
        private Double _deadZoneY;
        private Double _translateScaleFactor;
        private Double _rotateScaleFactor;
        private Boolean _showLRF;
        private Boolean _showArm;
        /// <summary>
        /// Dead ZoneX
        /// </summary>
        [DataMember()]
        public Double DeadZoneX
        {
            get
            {
                return this._deadZoneX;
            }
            set
            {
                this._deadZoneX = value;
            }
        }
        /// <summary>
        /// Dead ZoneY
        /// </summary>
        [DataMember()]
        public Double DeadZoneY
        {
            get
            {
                return this._deadZoneY;
            }
            set
            {
                this._deadZoneY = value;
            }
        }
        /// <summary>
        /// Translate Scale Factor
        /// </summary>
        [DataMember()]
        public Double TranslateScaleFactor
        {
            get
            {
                return this._translateScaleFactor;
            }
            set
            {
                this._translateScaleFactor = value;
            }
        }
        /// <summary>
        /// Rotate Scale Factor
        /// </summary>
        [DataMember()]
        public Double RotateScaleFactor
        {
            get
            {
                return this._rotateScaleFactor;
            }
            set
            {
                this._rotateScaleFactor = value;
            }
        }
        /// <summary>
        /// ShowLRF
        /// </summary>
        [DataMember()]
        public Boolean ShowLRF
        {
            get
            {
                return this._showLRF;
            }
            set
            {
                this._showLRF = value;
            }
        }
        /// <summary>
        /// Show Arm
        /// </summary>
        [DataMember()]
        public Boolean ShowArm
        {
            get
            {
                return this._showArm;
            }
            set
            {
                this._showArm = value;
            }
        }
        public void CopyTo(GUIOptions target)
        {
            target.DeadZoneX = this.DeadZoneX;
            target.DeadZoneY = this.DeadZoneY;
            target.TranslateScaleFactor = this.TranslateScaleFactor;
            target.RotateScaleFactor = this.RotateScaleFactor;
            target.ShowLRF = this.ShowLRF;
            target.ShowArm = this.ShowArm;
        }
        public virtual object Clone()
        {
            GUIOptions newobj = new GUIOptions();
            CopyTo(newobj);
            return newobj;

        }
    }
    /// <summary>
    /// Simple Dashboard Operations
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class SimpleDashboardOperations : PortSet<DsspDefaultLookup, DsspDefaultDrop, Get, Replace>
    {
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<LookupResponse,Fault> DsspDefaultLookup(LookupRequestType body)
        {
            DsspDefaultLookup op = new DsspDefaultLookup();
            op.Body = body ?? new LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<LookupResponse,Fault> DsspDefaultLookup()
        {
            DsspDefaultLookup op = new DsspDefaultLookup();
            op.Body = new LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<DefaultDropResponseType,Fault> DsspDefaultDrop(DropRequestType body)
        {
            DsspDefaultDrop op = new DsspDefaultDrop();
            op.Body = body ?? new DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            DsspDefaultDrop op = new DsspDefaultDrop();
            op.Body = new DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Get and return the response port.
        public virtual PortSet<StateType,Fault> Get(GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Replace and return the response port.
        public virtual PortSet<DefaultReplaceResponseType,Fault> Replace(StateType body)
        {
            Replace op = new Replace();
            op.Body = body ?? new StateType();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Get<GetRequestType, PortSet<StateType, Fault>>
    {
        public Get()
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<StateType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Replace
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : Replace<StateType, PortSet<DefaultReplaceResponseType, Fault>>
    {
        public Replace()
        {
        }
        public Replace(StateType body) : 
                base(body)
        {
        }
        public Replace(StateType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
